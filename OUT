warning: redundant field names in struct initialization
   --> src/pipeline/subcommands/info.rs:183:25
    |
183 |                         storage_type: storage_type,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `storage_type`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names
    = note: `#[warn(clippy::redundant_field_names)]` on by default

warning: this `else { if .. }` block can be collapsed
   --> src/pipeline/subcommands/write.rs:295:36
    |
295 |   ...                   } else {
    |  ______________________________^
296 | | ...                       if let Err(e) = write_pcd_data(&pcd, pcd_data_type, &output_file) {
297 | | ...                           println!("Failed to write {:?}\n{e}", output_file);
298 | | ...                       }
299 | | ...                   }
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
    = note: `#[warn(clippy::collapsible_else_if)]` on by default
help: collapse nested if block
    |
295 ~                             } else if let Err(e) = write_pcd_data(&pcd, pcd_data_type, &output_file) {
296 +                                 println!("Failed to write {:?}\n{e}", output_file);
297 +                             }
    |

warning: redundant field names in struct initialization
  --> src/vvplay_async_prefetch/buffer_manager.rs:79:13
   |
79 |             camera_pos: camera_pos,
   |             ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `camera_pos`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: unneeded `return` statement
   --> src/dash/buffer.rs:193:9
    |
193 |         return false;
    |         ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
    = note: `#[warn(clippy::needless_return)]` on by default
help: remove `return`
    |
193 -         return false;
193 +         false
    |

warning: accessing first element with `self
                     .mpd
                     .base_urls
                     .as_ref()
                     .unwrap().get(0)`
  --> src/dash/parser.rs:45:19
   |
45 |           let url = self
   |  ___________________^
46 | |             .mpd
47 | |             .base_urls
48 | |             .as_ref()
49 | |             .unwrap()
50 | |             .get(0)
   | |___________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first
   = note: `#[warn(clippy::get_first)]` on by default
help: try
   |
45 ~         let url = self
46 +             .mpd
47 +             .base_urls
48 +             .as_ref()
49 +             .unwrap().first()
   |

warning: accessing first element with `self.mpd.periods.get(0)`
   --> src/dash/parser.rs:216:22
    |
216 |         let period = self.mpd.periods.get(0).unwrap();
    |                      ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `self.mpd.periods.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: method `default` can be confused for the standard trait method `std::default::Default::default`
  --> src/formats/metadata.rs:28:5
   |
28 | /     pub fn default() -> Self {
29 | |         Self {
30 | |             bounds: vec![],
31 | |             base_point_num: vec![],
...  |
34 | |         }
35 | |     }
   | |_____^
   |
   = help: consider implementing the trait `std::default::Default` or choosing a less ambiguous method name
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait
   = note: `#[warn(clippy::should_implement_trait)]` on by default

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/formats/mod.rs:66:45
   |
66 |     pub fn self_segment(&mut self, offsets: &Vec<usize>, bounds: &Vec<Bounds>) {
   |                                             ^^^^^^^^^^^ help: change this to: `&[usize]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg
   = note: `#[warn(clippy::ptr_arg)]` on by default

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/formats/mod.rs:66:66
   |
66 |     pub fn self_segment(&mut self, offsets: &Vec<usize>, bounds: &Vec<Bounds>) {
   |                                                                  ^^^^^^^^^^^^ help: change this to: `&[Bounds]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/formats/mod.rs:86:18
   |
86 |         offsets: &Vec<usize>,
   |                  ^^^^^^^^^^^ help: change this to: `&[usize]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/formats/mod.rs:87:24
   |
87 |         bound_indices: &Vec<usize>,
   |                        ^^^^^^^^^^^ help: change this to: `&[usize]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/formats/mod.rs:88:17
   |
88 |         bounds: &Vec<Bounds>,
   |                 ^^^^^^^^^^^^ help: change this to: `&[Bounds]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: module has the same name as its containing module
 --> src/lodify/mod.rs:1:1
  |
1 | pub mod lodify;
  | ^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_inception
  = note: `#[warn(clippy::module_inception)]` on by default

warning: unneeded `return` statement
  --> src/lodify/lodify.rs:20:9
   |
20 |         return (points.clone(), vec![], vec![], vec![]);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
20 -         return (points.clone(), vec![], vec![], vec![]);
20 +         (points.clone(), vec![], vec![], vec![])
   |

warning: unneeded `return` statement
  --> src/lodify/lodify.rs:69:9
   |
69 |         return (pc.clone(), PointCloud::new(0, vec![]));
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
69 -         return (pc.clone(), PointCloud::new(0, vec![]));
69 +         (pc.clone(), PointCloud::new(0, vec![]))
   |

warning: this expression creates a reference which is immediately dereferenced by the compiler
  --> src/lodify/lodify.rs:71:34
   |
71 |         let bound = get_pc_bound(&pc);
   |                                  ^^^ help: change this to: `pc`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow
   = note: `#[warn(clippy::needless_borrow)]` on by default

warning: length comparison to zero
  --> src/lodify/lodify.rs:82:15
   |
82 |         while points_by_voxel.len() > 0 {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!points_by_voxel.is_empty()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero
   = note: `#[warn(clippy::len_zero)]` on by default

warning: length comparison to zero
  --> src/lodify/lodify.rs:97:16
   |
97 |             if points.len() > 0 {
   |                ^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!points.is_empty()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_zero

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/lodify/lodify.rs:139:33
    |
139 |     let pc_bound = get_pc_bound(&pc);
    |                                 ^^^ help: change this to: `pc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/lodify/lodify.rs:147:31
    |
147 |             if bound.contains(&point) {
    |                               ^^^^^^ help: change this to: `point`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: using `clone` on type `PointXyzRgba` which implements the `Copy` trait
   --> src/lodify/lodify.rs:148:48
    |
148 |                 partitioned_points[index].push(point.clone());
    |                                                ^^^^^^^^^^^^^ help: try dereferencing it: `*point`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy
    = note: `#[warn(clippy::clone_on_copy)]` on by default

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/metrics/acd.rs:11:14
   |
11 |         _p2: &Vec<PointXyzRgba>,
   |              ^^^^^^^^^^^^^^^^^^ help: change this to: `&[PointXyzRgba]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: returning the result of a `let` binding from a block
  --> src/metrics/acd.rs:26:9
   |
25 |         let acd_avg = acd_sum as f64 / p1.len() as f64;
   |         ----------------------------------------------- unnecessary `let` binding
26 |         acd_avg
   |         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
   = note: `#[warn(clippy::let_and_return)]` on by default
help: return the expression directly
   |
25 ~         
26 ~         acd_sum as f64 / p1.len() as f64
   |

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/metrics/hd.rs:24:14
   |
24 |         _p2: &Vec<PointXyzRgba>,
   |              ^^^^^^^^^^^^^^^^^^ help: change this to: `&[PointXyzRgba]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/metrics/lc_psnr.rs:17:24
   |
17 |         reconstructed: &Vec<PointXyzRgba>,
   |                        ^^^^^^^^^^^^^^^^^^ help: change this to: `&[PointXyzRgba]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: returning the result of a `let` binding from a block
  --> src/metrics/lc_psnr.rs:44:9
   |
43 |         let lc_psnr = 10f64 * (1f64 / l_mse).log(10f64);
   |         ------------------------------------------------ unnecessary `let` binding
44 |         lc_psnr
   |         ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
43 ~         
44 ~         10f64 * (1f64 / l_mse).log(10f64)
   |

warning: returning the result of a `let` binding from a block
  --> src/metrics/lc_psnr.rs:38:17
   |
37 |                 let luminance_square_error = (lab_p1.l / 255.0 - lab_p2.l / 255.0).powi(2);
   |                 --------------------------------------------------------------------------- unnecessary `let` binding
38 |                 luminance_square_error
   |                 ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
37 ~                 
38 ~                 (lab_p1.l / 255.0 - lab_p2.l / 255.0).powi(2)
   |

warning: you should consider adding a `Default` implementation for `Metrics`
  --> src/metrics/mod.rs:57:5
   |
57 | /     pub fn new() -> Self {
58 | |         Self(BTreeMap::new())
59 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
   = note: `#[warn(clippy::new_without_default)]` on by default
help: try adding this
   |
56 + impl Default for Metrics {
57 +     fn default() -> Self {
58 +         Self::new()
59 +     }
60 + }
   |

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/metrics/mod.rs:106:14
    |
106 |     metrics: &Vec<SupoportedMetrics>,
    |              ^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `&[SupoportedMetrics]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:144:30
    |
144 |             format!("{:.5}", acd_rt.clone().unwrap()),
    |                              ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_rt`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:148:30
    |
148 |             format!("{:.5}", acd_tr.clone().unwrap()),
    |                              ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_tr`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:155:13
    |
155 |             acd_rt.clone(),
    |             ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_rt`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:156:13
    |
156 |             acd_tr.clone(),
    |             ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_tr`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:162:66
    |
162 |         metrics_report.insert("cd".to_string(), format!("{:.5}", cd.clone().unwrap()));
    |                                                                  ^^^^^^^^^^ help: try removing the `clone` call: `cd`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:168:13
    |
168 |             acd_rt.clone(),
    |             ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_rt`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:169:13
    |
169 |             acd_tr.clone(),
    |             ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_tr`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:170:13
    |
170 |             cd.clone(),
    |             ^^^^^^^^^^ help: try removing the `clone` call: `cd`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:201:13
    |
201 |             acd_rt.clone(),
    |             ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_rt`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:202:13
    |
202 |             acd_tr.clone(),
    |             ^^^^^^^^^^^^^^ help: try removing the `clone` call: `acd_tr`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Option<f64>` which implements the `Copy` trait
   --> src/metrics/mod.rs:203:13
    |
203 |             cd.clone(),
    |             ^^^^^^^^^^ help: try removing the `clone` call: `cd`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: direct implementation of `ToString`
   --> src/pcd/data_types.rs:193:1
    |
193 | / impl ToString for PCDVersion {
194 | |     fn to_string(&self) -> String {
195 | |         match self {
196 | |             Self::V0_6 => ".6",
...   |
200 | |     }
201 | | }
    | |_^
    |
    = help: prefer implementing `Display` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl
    = note: `#[warn(clippy::to_string_trait_impl)]` on by default

warning: direct implementation of `ToString`
   --> src/pcd/data_types.rs:342:1
    |
342 | / impl ToString for PCDFieldSize {
343 | |     fn to_string(&self) -> String {
344 | |         match self {
345 | |             Self::One => "1",
...   |
351 | |     }
352 | | }
    | |_^
    |
    = help: prefer implementing `Display` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: direct implementation of `ToString`
   --> src/pcd/data_types.rs:405:1
    |
405 | / impl ToString for PCDFieldType {
406 | |     fn to_string(&self) -> String {
407 | |         match self {
408 | |             Self::Signed => "I",
...   |
413 | |     }
414 | | }
    | |_^
    |
    = help: prefer implementing `Display` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: direct implementation of `ToString`
   --> src/pcd/data_types.rs:437:1
    |
437 | / impl ToString for PCDDataType {
438 | |     fn to_string(&self) -> String {
439 | |         match self {
440 | |             Self::Ascii => "ascii",
...   |
445 | |     }
446 | | }
    | |_^
    |
    = help: prefer implementing `Display` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/pcd/reader.rs:25:23
   |
25 |     additional_files: &Vec<P>,
   |                       ^^^^^^^ help: change this to: `&[P]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/pcd/reader.rs:350:28
    |
350 |         additional_points: &Vec<usize>,
    |                            ^^^^^^^^^^^ help: change this to: `&[usize]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: single-character string constant used as pattern
  --> src/pipeline/executor.rs:55:53
   |
55 |                 let input_streams = match arg.split("=").nth(1) {
   |                                                     ^^^ help: consider using a `char`: `'='`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern
   = note: `#[warn(clippy::single_char_pattern)]` on by default

warning: if let .. else expression looks like `matches!` macro
   --> src/pipeline/executor.rs:201:17
    |
201 | /                 if let PipelineMessage::End = message {
202 | |                     true
203 | |                 } else {
204 | |                     false
205 | |                 }
    | |_________________^ help: try: `matches!(message, PipelineMessage::End)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
    = note: `#[warn(clippy::match_like_matches_macro)]` on by default

warning: direct implementation of `ToString`
  --> src/pipeline/subcommands/dash.rs:21:1
   |
21 | / impl ToString for DashAlgo {
22 | |     fn to_string(&self) -> String {
23 | |         match self {
24 | |             DashAlgo::Naive => "naive".to_string(),
...  |
27 | |     }
28 | | }
   | |_^
   |
   = help: prefer implementing `Display` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: useless use of `format!`
  --> src/pipeline/subcommands/dash.rs:95:31
   |
95 |         input_folder_r01.push(format!("{}", "R01"));
   |                               ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `"R01".to_string()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format
   = note: `#[warn(clippy::useless_format)]` on by default

warning: useless use of `format!`
  --> src/pipeline/subcommands/dash.rs:97:31
   |
97 |         input_folder_r02.push(format!("{}", "R02"));
   |                               ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `"R02".to_string()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format

warning: useless use of `format!`
  --> src/pipeline/subcommands/dash.rs:99:31
   |
99 |         input_folder_r03.push(format!("{}", "R03"));
   |                               ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `"R03".to_string()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format

warning: useless use of `format!`
   --> src/pipeline/subcommands/dash.rs:101:31
    |
101 |         input_folder_r04.push(format!("{}", "R04"));
    |                               ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `"R04".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format

warning: useless use of `format!`
   --> src/pipeline/subcommands/dash.rs:103:31
    |
103 |         input_folder_r05.push(format!("{}", "R05"));
    |                               ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `"R05".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format

warning: `format!` in `format!` args
   --> src/pipeline/subcommands/dash.rs:160:45
    |
160 |                           let in_frame_name = format!(
    |  _____________________________________________^
161 | |                             "{}_longdress_dec_{}.{}",
162 | |                             rate_prefix,
163 | |                             format!("{:0>4}", i + start_no),
164 | |                             extension
165 | |                         );
    | |_________________________^
    |
    = help: combine the `format!(..)` arguments with the outer `format!(..)` call
    = help: or consider changing `format!` to `format_args!`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args
    = note: `#[warn(clippy::format_in_format_args)]` on by default

warning: `format!` in `format!` args
   --> src/pipeline/subcommands/dash.rs:227:41
    |
227 |                       let in_frame_name = format!(
    |  _________________________________________^
228 | |                         "{}_longdress_dec_{}.{}",
229 | |                         rate_prefix,
230 | |                         format!("{:0>4}", count + start_no),
231 | |                         extension
232 | |                     );
    | |_____________________^
    |
    = help: combine the `format!(..)` arguments with the outer `format!(..)` call
    = help: or consider changing `format!` to `format_args!`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args

warning: unneeded late initialization
  --> src/pipeline/subcommands/extension.rs:44:9
   |
44 |         let cargo_path;
   |         ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init
   = note: `#[warn(clippy::needless_late_init)]` on by default
help: declare `cargo_path` here
   |
45 |         let cargo_path = match env::var_os(key) {
   |         ++++++++++++++++
help: remove the assignments from the `match` arms
   |
47 -                 cargo_path = val;
47 +                 val
   |
help: add a semicolon after the `match` expression
   |
53 |         };
   |          +

warning: using `clone` on type `u32` which implements the `Copy` trait
  --> src/pipeline/subcommands/extension.rs:82:37
   |
82 |                     pc_index = Some(index.clone());
   |                                     ^^^^^^^^^^^^^ help: try dereferencing it: `*index`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `u32` which implements the `Copy` trait
  --> src/pipeline/subcommands/extension.rs:87:37
   |
87 |                     pc_index = Some(index.clone());
   |                                     ^^^^^^^^^^^^^ help: try dereferencing it: `*index`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: unneeded `return` statement
   --> src/pipeline/subcommands/extension.rs:192:21
    |
192 |                     return Err("Failed to get deserialized output of the child process");
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
192 -                     return Err("Failed to get deserialized output of the child process");
192 +                     Err("Failed to get deserialized output of the child process")
    |

warning: unneeded late initialization
   --> src/pipeline/subcommands/extension.rs:153:5
    |
153 |     let input;
    |     ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init
help: declare `input` here
    |
154 |     let input = match input_pc {
    |     +++++++++++
help: remove the assignments from the `match` arms
    |
156 -             input = SubcommandObject::new(input_pc);
156 +             SubcommandObject::new(input_pc)
    |
help: add a semicolon after the `match` expression
    |
161 |     };
    |      +

warning: using `write!()` with a format string that ends in a single newline
  --> src/pipeline/subcommands/info.rs:71:9
   |
71 | /         write!(
72 | |             f,
73 | |             "format: {} {}\n",
74 | |             self.extension,
75 | |             self.storage_type.to_ascii_uppercase()
76 | |         )?;
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline
   = note: `#[warn(clippy::write_with_newline)]` on by default
help: use `writeln!` instead
   |
71 ~         writeln!(
72 |             f,
73 ~             "format: {} {}",
   |

warning: using `write!()` with a format string that ends in a single newline
   --> src/pipeline/subcommands/info.rs:140:9
    |
140 | /         write!(
141 | |             f,
142 | |             "format: {} {}\n",
143 | |             self.extension,
144 | |             self.storage_type.to_ascii_uppercase()
145 | |         )?;
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline
help: use `writeln!` instead
    |
140 ~         writeln!(
141 |             f,
142 ~             "format: {} {}",
    |

warning: using `write!()` with a format string that ends in a single newline
   --> src/pipeline/subcommands/info.rs:146:9
    |
146 |         write!(f, "number of frames: {}\n", self.num_of_frames)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline
help: use `writeln!` instead
    |
146 -         write!(f, "number of frames: {}\n", self.num_of_frames)?;
146 +         writeln!(f, "number of frames: {}", self.num_of_frames)?;
    |

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/pipeline/subcommands/info.rs:214:50
    |
214 |                 let file_info = self.handle_file(&path);
    |                                                  ^^^^^ help: change this to: `path`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/pipeline/subcommands/info.rs:220:33
    |
220 |                 self.handle_dir(&path);
    |                                 ^^^^^ help: change this to: `path`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
  --> src/pipeline/subcommands/normal_estimation.rs:42:59
   |
42 |     let covariance_matrices = compute_covariance_matrices(&pc, &neighbors);
   |                                                           ^^^ help: change this to: `pc`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/pipeline/subcommands/normal_estimation.rs:327:44
    |
327 |             .min_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or(std::cmp::Ordering::Equal))
    |                                            ^^^^ help: change this to: `b.1`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: the borrowed expression implements the required traits
   --> src/pipeline/mod.rs:230:48
    |
230 |     let _subcommand = VVSubCommand::parse_from(&["vv", "--help"]);
    |                                                ^^^^^^^^^^^^^^^^^ help: change this to: `["vv", "--help"]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args
    = note: `#[warn(clippy::needless_borrows_for_generic_args)]` on by default

warning: use of `expect` followed by a function call
  --> src/ply.rs:12:10
   |
12 |         .expect(&format!("Unable to open file {:?}", path_buf.as_ref()));
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|_| panic!("Unable to open file {:?}", path_buf.as_ref()))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call
   = note: `#[warn(clippy::expect_fun_call)]` on by default

warning: use of `expect` followed by a function call
  --> src/ply.rs:15:52
   |
15 |       let header = vertex_parser.read_header(&mut f).expect(&format!(
   |  ____________________________________________________^
16 | |         "Failed to read header for ply file {:?}",
17 | |         path_buf.as_ref()
18 | |     ));
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call
help: try
   |
15 ~     let header = vertex_parser.read_header(&mut f).unwrap_or_else(|_| panic!("Failed to read header for ply file {:?}",
16 ~         path_buf.as_ref()));
   |

warning: use of `or_insert_with` to construct default value
  --> src/reconstruct/poisson_reconstruction/hgrid.rs:91:31
   |
91 |         self.cells.entry(key).or_insert_with(Vec::new).push(element)
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default
   = note: `#[warn(clippy::unwrap_or_default)]` on by default

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> src/render/wgpu/antialias.rs:61:33
   |
61 |     pub fn apply(&self, points: &Vec<PointXyzRgba>) -> Vec<PointXyzRgba> {
   |                                 ^^^^^^^^^^^^^^^^^^ help: change this to: `&[PointXyzRgba]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: using `clone` on type `Camera` which implements the `Copy` trait
  --> src/render/wgpu/camera.rs:35:69
   |
35 |             CameraController::new(CAMERA_SPEED, CAMERA_SENSITIVITY, camera.clone());
   |                                                                     ^^^^^^^^^^^^^^ help: try removing the `clone` call: `camera`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: manual implementation of an assign operation
   --> src/render/wgpu/camera.rs:460:17
    |
460 |                 camera.yaw = camera.yaw - rotate_angle * clock_wise;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `camera.yaw -= rotate_angle * clock_wise`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern
    = note: `#[warn(clippy::assign_op_pattern)]` on by default

warning: manual implementation of an assign operation
   --> src/render/wgpu/camera.rs:461:17
    |
461 |                 camera.yaw = camera.yaw % Rad(2.0 * std::f32::consts::PI);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `camera.yaw %= Rad(2.0 * std::f32::consts::PI)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/render/wgpu/camera.rs:477:17
    |
477 |                 camera.pitch = camera.pitch - rotate_angle * clock_wise;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `camera.pitch -= rotate_angle * clock_wise`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
   --> src/render/wgpu/camera.rs:478:17
    |
478 |                 camera.pitch = camera.pitch % Rad(2.0 * std::f32::consts::PI);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `camera.pitch %= Rad(2.0 * std::f32::consts::PI)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: using `clone` on type `Point3<f32>` which implements the `Copy` trait
   --> src/render/wgpu/camera.rs:493:31
    |
493 |             camera.position = self.initial_camera.position.clone();
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `self.initial_camera.position`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Rad<f32>` which implements the `Copy` trait
   --> src/render/wgpu/camera.rs:494:26
    |
494 |             camera.yaw = self.initial_camera.yaw.clone();
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `self.initial_camera.yaw`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Rad<f32>` which implements the `Copy` trait
   --> src/render/wgpu/camera.rs:495:28
    |
495 |             camera.pitch = self.initial_camera.pitch.clone();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `self.initial_camera.pitch`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: using `clone` on type `Vector3<f32>` which implements the `Copy` trait
   --> src/render/wgpu/camera.rs:496:25
    |
496 |             camera.up = self.initial_camera.up.clone();
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing the `clone` call: `self.initial_camera.up`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: direct implementation of `ToString`
  --> src/render/wgpu/png.rs:21:1
   |
21 | / impl ToString for RenderFormat {
22 | |     fn to_string(&self) -> String {
23 | |         match self {
24 | |             RenderFormat::Png => "png".to_string(),
...  |
27 | |     }
28 | | }
   | |_^
   |
   = help: prefer implementing `Display` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: this function has too many arguments (10/7)
  --> src/render/wgpu/png.rs:59:5
   |
59 | /     pub fn new(
60 | |         output_dir: OsString,
61 | |         camera_x: f32,
62 | |         camera_y: f32,
...  |
69 | |         render_format: RenderFormat,
70 | |     ) -> Self {
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments
   = note: `#[warn(clippy::too_many_arguments)]` on by default

warning: this pattern takes a reference on something that is being dereferenced
   --> src/render/wgpu/reader.rs:361:21
    |
361 |         if let Some(&ref result) = self.cache.iter().find(|&i| i.0 == index) {
    |                     ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference
    = note: `#[warn(clippy::needless_borrowed_reference)]` on by default
help: try removing the `&ref` part
    |
361 -         if let Some(&ref result) = self.cache.iter().find(|&i| i.0 == index) {
361 +         if let Some(result) = self.cache.iter().find(|&i| i.0 == index) {
    |

warning: this pattern takes a reference on something that is being dereferenced
   --> src/render/wgpu/reader.rs:414:21
    |
414 |         if let Some(&ref result) = self.cache.iter().find(|&i| i.0 == index) {
    |                     ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference
help: try removing the `&ref` part
    |
414 -         if let Some(&ref result) = self.cache.iter().find(|&i| i.0 == index) {
414 +         if let Some(result) = self.cache.iter().find(|&i| i.0 == index) {
    |

warning: redundant closure
   --> src/render/wgpu/render_manager.rs:105:49
    |
105 |             let add_dirs = add_paths.iter().map(|s| Path::new(s)).collect::<Vec<_>>();
    |                                                 ^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Path::new`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure
    = note: `#[warn(clippy::redundant_closure)]` on by default

warning: struct `AdaptiveManager` has a public `len` method, but no `is_empty` method
   --> src/render/wgpu/render_manager.rs:229:5
    |
229 |     pub fn len(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty
    = note: `#[warn(clippy::len_without_is_empty)]` on by default

warning: accessing first element with `self.points.get(0)`
   --> src/render/wgpu/renderable/mod.rs:144:27
    |
144 |         let first_point = self.points.get(0).unwrap();
    |                           ^^^^^^^^^^^^^^^^^^ help: try: `self.points.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: unneeded `return` statement
  --> src/render/wgpu/renderer.rs:43:9
   |
43 |         return Ok(Rgb::new(rgb[0] as f64, rgb[1] as f64, rgb[2] as f64));
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
43 -         return Ok(Rgb::new(rgb[0] as f64, rgb[1] as f64, rgb[2] as f64));
43 +         Ok(Rgb::new(rgb[0] as f64, rgb[1] as f64, rgb[2] as f64))
   |

warning: stripping a prefix manually
  --> src/render/wgpu/renderer.rs:45:43
   |
45 |         let hex_num = u32::from_str_radix(&bg_color_str[1..], 16);
   |                                           ^^^^^^^^^^^^^^^^^^
   |
note: the prefix was tested here
  --> src/render/wgpu/renderer.rs:44:12
   |
44 |     } else if bg_color_str.starts_with("#") {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
   = note: `#[warn(clippy::manual_strip)]` on by default
help: try using the `strip_prefix` method
   |
44 ~     } else if let Some(<stripped>) = bg_color_str.strip_prefix("#") {
45 ~         let hex_num = u32::from_str_radix(<stripped>, 16);
   |

warning: single-character string constant used as pattern
  --> src/render/wgpu/renderer.rs:44:40
   |
44 |     } else if bg_color_str.starts_with("#") {
   |                                        ^^^ help: consider using a `char`: `'#'`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern

warning: use of `default` to create a unit struct
  --> src/render/wgpu/renderer.rs:94:31
   |
94 |             _data: PhantomData::default(),
   |                               ^^^^^^^^^^^ help: remove this call to `default`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_constructed_unit_structs
   = note: `#[warn(clippy::default_constructed_unit_structs)]` on by default

warning: use of `default` to create a unit struct
   --> src/render/wgpu/renderer.rs:508:31
    |
508 |             _data: PhantomData::default(),
    |                               ^^^^^^^^^^^ help: remove this call to `default`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_constructed_unit_structs

warning: unneeded `return` statement
  --> src/render/wgpu/resolution_controller.rs:73:9
   |
73 |         return desired_num_points;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
73 -         return desired_num_points;
73 +         desired_num_points
   |

warning: the loop variable `i` is used to index `desired_num_points`
  --> src/render/wgpu/resolution_controller.rs:46:18
   |
46 |         for i in 0..bounds.len() {
   |                  ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop
   = note: `#[warn(clippy::needless_range_loop)]` on by default
help: consider using an iterator and enumerate()
   |
46 |         for (i, <item>) in desired_num_points.iter_mut().enumerate().take(bounds.len()) {
   |             ~~~~~~~~~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: unneeded `return` statement
  --> src/render/wgpu/resolution_controller.rs:99:9
   |
99 |         return (current_point_num as f32 * scaling_factor as f32) as usize;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
99 -         return (current_point_num as f32 * scaling_factor as f32) as usize;
99 +         (current_point_num as f32 * scaling_factor as f32) as usize
   |

warning: casting to the same type is unnecessary (`f32` -> `f32`)
  --> src/render/wgpu/resolution_controller.rs:99:44
   |
99 |         return (current_point_num as f32 * scaling_factor as f32) as usize;
   |                                            ^^^^^^^^^^^^^^^^^^^^^ help: try: `scaling_factor`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast
   = note: `#[warn(clippy::unnecessary_cast)]` on by default

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> src/render/wgpu/resolution_controller.rs:102:34
    |
102 |     fn calculate_spacing(points: &Vec<PointXyzRgba>) -> f32 {
    |                                  ^^^^^^^^^^^^^^^^^^ help: change this to: `&[PointXyzRgba]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg

warning: direct implementation of `ToString`
  --> src/upsample/upsample_methods.rs:9:1
   |
9  | / impl ToString for UpsampleMethod {
10 | |     fn to_string(&self) -> String {
11 | |         match self {
12 | |             UpsampleMethod::Spsr => "spsr",
...  |
16 | |     }
17 | | }
   | |_^
   |
   = help: prefer implementing `Display` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: you should consider adding a `Default` implementation for `LastValue<T>`
   --> src/utils.rs:143:5
    |
143 | /     pub fn new() -> Self {
144 | |         LastValue { last_value: None }
145 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
142 + impl<T> Default for LastValue<T> {
143 +     fn default() -> Self {
144 +         Self::new()
145 +     }
146 + }
    |

warning: you should consider adding a `Default` implementation for `SimpleRunningAverage<T, N>`
   --> src/utils.rs:182:5
    |
182 | /     pub fn new() -> Self {
183 | |         SimpleRunningAverage {
184 | |             values: [T::default(); N],
185 | |             next: 0,
...   |
188 | |         }
189 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
178 + impl<T, const N: usize> Default for SimpleRunningAverage<T, N>
179 + where
180 +     T: Default + Copy,
181 +  {
182 +     fn default() -> Self {
183 +         Self::new()
184 +     }
185 + }
    |

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/utils.rs:493:36
    |
493 |     if let Err(e) = write_pcd_file(&pcd, storage_type, &output_file) {
    |                                    ^^^^ help: change this to: `pcd`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: direct implementation of `ToString`
   --> src/utils.rs:890:1
    |
890 | / impl ToString for ConvertOutputFormat {
891 | |     fn to_string(&self) -> String {
892 | |         match self {
893 | |             ConvertOutputFormat::PLY => "ply",
...   |
899 | |     }
900 | | }
    | |_^
    |
    = help: prefer implementing `Display` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl

warning: manual `RangeInclusive::contains` implementation
  --> src/velodyne/data_types.rs:22:17
   |
22 |         assert!(intensity >= 0f32 && intensity <= 255f32);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0f32..=255f32).contains(&intensity)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains
   = note: `#[warn(clippy::manual_range_contains)]` on by default

warning: using `write!()` with a format string that ends in a single newline
  --> src/velodyne/data_types.rs:63:9
   |
63 |         write!(f, "\n")?;
   |         ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline
help: use `writeln!` instead
   |
63 -         write!(f, "\n")?;
63 +         writeln!(f)?;
   |

warning: unnecessary closure used to substitute value for `Option::None`
   --> src/vvplay_async_prefetch/buffer_manager.rs:157:56
    |
157 | ...                   viewport_predictor.add(renderer_req.camera_pos.unwrap_or_else(|| original_position));
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------
    |                                                                      |
    |                                                                      help: use `unwrap_or(..)` instead: `unwrap_or(original_position)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations
    = note: `#[warn(clippy::unnecessary_lazy_evaluations)]` on by default

warning: `vvtk` (lib) generated 107 warnings (run `cargo clippy --fix --lib -p vvtk` to apply 75 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 11.11s
